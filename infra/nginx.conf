worker_processes auto;
events { worker_connections 1024; }

http {
  # Enhanced audit log with request id, user id, latency
  log_format main_ext '{"ts":"$time_iso8601","remote":"$remote_addr","req":"$request","status":$status,"bytes":$body_bytes_sent,"ref":"$http_referer","ua":"$http_user_agent","req_id":"$request_id","user":"$auth_user_id","rt":$request_time,"urt":"$upstream_response_time"}';
  access_log /var/log/nginx/access.log main_ext;

  gzip on;
  sendfile on;
  client_max_body_size 200m;
  proxy_read_timeout 300s;
  proxy_send_timeout 300s;

  upstream core_app { server core-app:${CORE_PORT_INTERNAL}; }

  # Basic IP-based rate limiting (100 rpm ~ 1.6 rps burst 20)
  limit_req_zone $binary_remote_addr zone=perip:10m rate=100r/m;

  server {
    listen ${NGINX_HTTP_PORT_INTERNAL};

    # Static files served from shared volume
    location /files/ {
      alias /data/;
      autoindex on;   # dev only; disable in prod
      add_header Access-Control-Allow-Origin *;
    }

    # Gateway health
    location = /healthz { return 200 "ok"; }

    # Internal call to core-app for auth (NGINX auth_request)
    location = /_auth/validate {
      internal;
      proxy_pass http://core_app/api/auth/validate;  # ✅ includes /api
      proxy_pass_request_body off;                   # ✅ subrequest has no body
      proxy_set_header Content-Length "";            # ✅ avoid CL mismatch

      proxy_set_header Authorization $http_authorization;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-Id $request_id;
    }
    # Protect all /api/* via auth_request
    location /api/ {
      # Validate JWTs at the gateway via Core's /auth/validate
      auth_request /_auth/validate;
      error_page 401 = @unauthorized;
      error_page 403 = @forbidden;

      # Capture headers from auth subrequest to propagate to services
      auth_request_set $auth_user_id $upstream_http_x_user_id;
      auth_request_set $auth_scopes  $upstream_http_x_scopes;

      # Apply rate limit per IP (per-user can be added in-core)
      limit_req zone=perip burst=20 nodelay;

      # Minimal WAF-style guards against obvious bad patterns
      if ($request_method !~ ^(GET|POST|PUT|PATCH|DELETE|OPTIONS)$) { return 405; }
      if ($query_string ~* "(?:(union(\s|%20)+select|select(\s|%20)+.*(from|information_schema)|sleep\()|<script|\bor\b\s+1=1)" ) { return 403; }

      proxy_pass http://core_app$request_uri;  # core exposes /api/*
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header Authorization $http_authorization;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Request-Id $request_id;
      proxy_set_header X-User-Id $auth_user_id;
      proxy_set_header X-Scopes $auth_scopes;
    }

    location @unauthorized { return 401; }
    location @forbidden    { return 403; }
  }
}